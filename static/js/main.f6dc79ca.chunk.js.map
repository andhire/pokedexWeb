{"version":3,"sources":["serviceWorker.js","components/PokemonList.js","pages/Home.js","components/PokemonDetail.js","pages/Pokemon.js","components/Navbar.js","pages/Hoenn.js","pages/Alola.js","pages/Kalos.js","pages/Johto.js","pages/Kanto.js","pages/Sinnoh.js","pages/Teselia.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","getNumberUrl","url","number","a","charAt","PokemonList","props","_React$useState","React","useState","state","data","results","_React$useState2","Object","slicedToArray","queryList","setQueryList","useMemo","result","filter","name","includes","query","toLowerCase","react_default","createElement","Fragment","className","map","pokemon","index","react_router_dom","to","toString","key","Card","border","Body","height","width","alt","src","Title","toUpperCase","slice","Home","loading","error","fetchPokemons","_callee","response","regenerator_default","wrap","_context","prev","next","_this","setState","fetch","sent","json","length","t0","stop","this","_this2","isReady","InputGroup","size","FormControl","aria-label","aria-describedby","type","placeholder","value","onChange","e","target","components_PokemonList","pokemonLenght","Spinner","animation","role","variant","Component","PokemonDetail","h","altura","evolutions","console","log","evo","chain","pokemons","id","evolves_to","push","species","specie","evolution","evoJson","chainEvolution","habitat","Row","Col","capitalize","genera","genus","weight","types","Badge","pill","base_experience","stats","base_stat","CardColumns","game_indices","game","version","Text","CardGroup","onClick","scrollTo","Pokemon","fetchPokemon","responseSpecie","dataSpecie","responseEvolution","dataEvolution","params","pokemonId","evolution_chain","components_PokemonDetail","Navbara","Navbar","bg","expand","lib","Brand","Toggle","aria-controls","Collapse","Nav","Link","Hoenn","Alola","Kalos","Johto","Kanto","Sinnoh","Teselia","App","components_Navbar","react_router","exact","path","component","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6dc79ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles/card.css\";\r\n\r\nfunction capitalize(name) {\r\n    return name.charAt(0).toUpperCase() + name.slice(1);\r\n}\r\nfunction getNumberUrl(url) {\r\n    var number = \"\";\r\n    for (let a = 0; a < 3; a++) {\r\n        if (url.charAt(34 + a) === \"/\") {\r\n            break;\r\n        }\r\n        number += url.charAt(34 + a);\r\n    }\r\n    return number;\r\n}\r\n\r\nfunction PokemonList(props) {\r\n    const [queryList, setQueryList] = React.useState(props.state.data.results);\r\n    React.useMemo(() => {\r\n        const result = props.state.data.results.filter(data => {\r\n            return data.name.includes(props.state.query.toLowerCase());\r\n        });\r\n        setQueryList(result);\r\n    }, [props.state.data.results, props.state.query]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"display\">\r\n                {queryList.map((pokemon, index) => {\r\n                    return (\r\n                        <Link\r\n                            to={\"/\" + getNumberUrl(pokemon.url).toString()}\r\n                            className=\"text-reset text-decoration-none a\"\r\n                            key={index}\r\n                        >\r\n                            <Card border=\"dark\">\r\n                                <Card.Body className=\"flex\">\r\n                                    <img\r\n                                        height=\"60\"\r\n                                        width=\"60\"\r\n                                        alt=\"Pokemon \"\r\n                                        src={\r\n                                            \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" +\r\n                                            getNumberUrl(pokemon.url) +\r\n                                            \".png\"\r\n                                        }\r\n                                    />\r\n\r\n                                    <Card.Title className=\"Card-Title\">\r\n                                        {capitalize(pokemon.name)}\r\n                                    </Card.Title>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Link>\r\n                    );\r\n                })}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default PokemonList;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Home extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=807\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Card, Badge, Row, Col, CardColumns, CardGroup } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles/card.css\";\r\nclass PokemonDetail extends React.Component {\r\n    capitalize(name) {\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n    }\r\n\r\n    height(h) {\r\n        var altura = h.toString();\r\n        altura =\r\n            altura.slice(0, altura.length - 1) +\r\n            \".\" +\r\n            altura[altura.length - 1];\r\n\r\n        return altura;\r\n    }\r\n    chainEvolution(evolutions) {\r\n        console.log(evolutions);\r\n        var evo = evolutions.chain;\r\n        var json = {\r\n            pokemons: [],\r\n            id: []\r\n        };\r\n\r\n        while (evo.evolves_to.length > 0) {\r\n            json.pokemons.push(evo.species.name);\r\n            json.id.push(this.getNumberUrl(evo.species.url));\r\n            evo = evo.evolves_to[0];\r\n        }\r\n        json.pokemons.push(evo.species.name);\r\n        json.id.push(this.getNumberUrl(evo.species.url));\r\n        console.log(\"Pokemons:\" + json.pokemons + \"  id\" + json.id);\r\n        return json;\r\n    }\r\n\r\n    getNumberUrl(url) {\r\n        var number = \"\";\r\n        for (let a = 0; a < 3; a++) {\r\n            if (url.charAt(42 + a) === \"/\") {\r\n                break;\r\n            }\r\n            number += url.charAt(42 + a);\r\n        }\r\n        return number;\r\n    }\r\n\r\n    render() {\r\n        const pokemon = this.props.pokemon;\r\n        const specie = this.props.specie;\r\n        const evolution = this.props.evolution;\r\n        const evoJson = this.chainEvolution(evolution);\r\n        var habitat = \"\";\r\n        try {\r\n            habitat = specie.habitat.name;\r\n        } catch (e) {\r\n            habitat = \"Unknown\";\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"margin\">\r\n                    <Row>\r\n                        <Col className=\"center\">\r\n                            <img\r\n                                src={\r\n                                    \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" +\r\n                                    this.props.id +\r\n                                    \".png\"\r\n                                }\r\n                                width=\"200\"\r\n                                height=\"200\"\r\n                                alt=\"pokemon\"\r\n                            />\r\n                            <h2>{this.capitalize(pokemon.species.name)}</h2>\r\n                            <p>{specie.genera[2].genus}</p>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <Row className=\"margin\">\r\n                    <Col>\r\n                        <p>\r\n                            <b>Height: </b>\r\n                            {this.height(pokemon.height)} m\r\n                        </p>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <p>\r\n                            <b>Weight:</b> {this.height(pokemon.weight)} kg\r\n                        </p>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <p>\r\n                            <b>Type: </b>\r\n\r\n                            {pokemon.types.map(type => {\r\n                                return (\r\n                                    <Badge\r\n                                        pill\r\n                                        className={type.type.name}\r\n                                        key={type.type.name}\r\n                                    >\r\n                                        {type.type.name}\r\n                                    </Badge>\r\n                                );\r\n                            })}\r\n                        </p>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <p>\r\n                            <b>Habitat: </b>\r\n                            {this.capitalize(habitat)}\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n                <br />\r\n                <div className=\"margin\">\r\n                    <Row>\r\n                        <Col>\r\n                            <h3 className=\"center\"> Stats</h3>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Base Experience: </b>\r\n                            {pokemon.base_experience}\r\n                        </p>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Hp:</b> {pokemon.stats[5].base_stat}\r\n                        </p>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Attack:</b> {pokemon.stats[4].base_stat}\r\n                        </p>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Speed:</b> {pokemon.stats[0].base_stat}\r\n                        </p>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Defense:</b> {pokemon.stats[3].base_stat}\r\n                        </p>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Special Attack:</b> {pokemon.stats[2].base_stat}\r\n                        </p>\r\n                    </Row>\r\n                    <Row className=\"margin\">\r\n                        <p>\r\n                            <b>Special Defense:</b> {pokemon.stats[1].base_stat}\r\n                        </p>\r\n                    </Row>\r\n                </div>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"center\"> VideoGames</h3>\r\n                    </Col>\r\n                </Row>\r\n                <div>\r\n                    <CardColumns>\r\n                        {pokemon.game_indices.map(game => {\r\n                            return (\r\n                                <Card border=\"danger\" key={game.version.name}>\r\n                                    <Card.Text className=\"center\">\r\n                                        {this.capitalize(game.version.name)}\r\n                                    </Card.Text>\r\n                                </Card>\r\n                            );\r\n                        })}\r\n                    </CardColumns>\r\n                </div>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"center\"> Evolutions</h3>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <CardGroup className=\"center\">\r\n                    {evoJson.pokemons.map((pokemon, index) => {\r\n                        return (\r\n                            <Link\r\n                                to={\"/\" + evoJson.id[index].toString()}\r\n                                className=\"text-reset text-decoration-none a\"\r\n                                key={index}\r\n                                onClick={window.scrollTo(0, 0)}\r\n                            >\r\n                                <Card>\r\n                                    <Col className=\"center\">\r\n                                        <img\r\n                                            src={\r\n                                                \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" +\r\n                                                evoJson.id[index] +\r\n                                                \".png\"\r\n                                            }\r\n                                            width=\"200\"\r\n                                            height=\"200\"\r\n                                            alt=\"Pokemon Evolucion\"\r\n                                        />\r\n                                    </Col>\r\n\r\n                                    <Card.Title>\r\n                                        {this.capitalize(pokemon)}\r\n                                    </Card.Title>\r\n                                </Card>\r\n                            </Link>\r\n                        );\r\n                    })}\r\n                </CardGroup>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokemonDetail;\r\n","import React from \"react\";\r\nimport PokemonDetail from \"../components/PokemonDetail\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport \"./syles/home.css\";\r\n\r\nclass Pokemon extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {},\r\n        specie: {},\r\n        evolution: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemon();\r\n    }\r\n\r\n    fetchPokemon = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/\" +\r\n                    this.props.match.params.pokemonId\r\n            );\r\n            const data = await response.json();\r\n\r\n            this.setState({\r\n                data: data\r\n            });\r\n            const responseSpecie = await fetch(this.state.data.species.url);\r\n            const dataSpecie = await responseSpecie.json();\r\n\r\n            this.setState({ specie: dataSpecie });\r\n\r\n            const responseEvolution = await fetch(\r\n                this.state.specie.evolution_chain.url\r\n            );\r\n            const dataEvolution = await responseEvolution.json();\r\n            this.setState({ evolution: dataEvolution, loading: false });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <PokemonDetail\r\n                        pokemon={this.state.data}\r\n                        specie={this.state.specie}\r\n                        id={this.props.match.params.pokemonId}\r\n                        evolution={this.state.evolution}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else if (this.error) {\r\n            return <p>Upps ocurrio algo</p>;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Pokemon;\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport \"./styles/card.css\";\r\nfunction Navbara(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <Navbar bg=\"danger\" expand=\"lg\" variant=\"dark\">\r\n                <LinkContainer to=\"/\">\r\n                    <Navbar.Brand>Pokedex</Navbar.Brand>\r\n                </LinkContainer>\r\n\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\" />\r\n                    <Nav>\r\n                        <LinkContainer to=\"/Kanto/\">\r\n                            <Nav.Link>1st Gen. (Kanto)</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                        <LinkContainer to=\"/johto/\">\r\n                            <Nav.Link>2nd Gen. (Johto)</Nav.Link>\r\n                        </LinkContainer>\r\n                        <LinkContainer to=\"/hoenn/\">\r\n                            <Nav.Link>3rd Gen. (Hoenn)</Nav.Link>\r\n                        </LinkContainer>\r\n                        <LinkContainer to=\"/sinnoh/\">\r\n                            <Nav.Link>4th Gen. (Sinnoh)</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                        <LinkContainer to=\"/teselia/\">\r\n                            <Nav.Link>5th Gen. (Teselia)</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                        <LinkContainer to=\"/kalos/\">\r\n                            <Nav.Link>6th Gen. (Kalos)</Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                        <LinkContainer to=\"/alola/\">\r\n                            <Nav.Link>7th Gen. (Alola)</Nav.Link>\r\n                        </LinkContainer>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Navbara;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Hoenn extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=251&limit=135\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Hoenn;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Alola extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=721&limit=86\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Alola;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Kalos extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=649&limit=72\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Kalos;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Johto extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=151&limit=100\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Johto;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Kanto extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=151\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Kanto;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Sinnoh extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=386&limit=107\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sinnoh;\r\n","import React from \"react\";\r\nimport PokemonList from \"../components/PokemonList\";\r\nimport { Spinner, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nimport \"./syles/home.css\";\r\nclass Teselia extends React.Component {\r\n    state = {\r\n        loading: true,\r\n        error: null,\r\n        data: {\r\n            results: []\r\n        },\r\n        query: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n\r\n    fetchPokemons = async () => {\r\n        this.setState({ loading: true, error: null });\r\n        try {\r\n            const response = await fetch(\r\n                \"https://pokeapi.co/api/v2/pokemon/?offset=493&limit=156\"\r\n            );\r\n            const data = await response.json();\r\n            this.setState({\r\n                data: data,\r\n                loading: false,\r\n                length: data.results.length\r\n            });\r\n        } catch (error) {\r\n            this.setState({ error: error, loading: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        if (this.isReady()) {\r\n            return (\r\n                <React.Fragment>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n\r\n                    <PokemonList\r\n                        state={this.state}\r\n                        pokemonLenght={this.state.length}\r\n                    />\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <InputGroup size=\"lg\" className=\"search\">\r\n                        <FormControl\r\n                            aria-label=\"Large\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\"\r\n                            type=\"text\"\r\n                            placeholder=\"Search Pokemon...\"\r\n                            size=\"lg\"\r\n                            value={this.state.query}\r\n                            onChange={e => {\r\n                                this.setState({ query: e.target.value });\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"status\"\r\n                        variant=\"danger\"\r\n                        className=\"spinner\"\r\n                    >\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    isReady() {\r\n        if (!this.state.loading) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Teselia;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"../pages/Home\";\r\nimport Pokemon from \"../pages/Pokemon\";\r\nimport Navbara from \"./Navbar\";\r\nimport Hoenn from \"../pages/Hoenn\";\r\nimport Alola from \"../pages/Alola\";\r\nimport Kalos from \"../pages/Kalos\";\r\nimport Johto from \"../pages/Johto\";\r\nimport Kanto from \"../pages/Kanto\";\r\nimport Sinnoh from \"../pages/Sinnoh\";\r\nimport Teselia from \"../pages/Teselia\";\r\nfunction App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Navbara />\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route exact path=\"/alola/\" component={Alola} />\r\n                <Route exact path=\"/hoenn/\" component={Hoenn} />\r\n                <Route exact path=\"/johto/\" component={Johto} />\r\n                <Route exact path=\"/kalos/\" component={Kalos} />\r\n                <Route exact path=\"/kanto/\" component={Kanto} />\r\n                <Route exact path=\"/sinnoh/\" component={Sinnoh} />\r\n                <Route exact path=\"/teselia/\" component={Teselia} />\r\n                <Route exact path=\"/:pokemonId/\" component={Pokemon} />\r\n                <Route component={Home} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}